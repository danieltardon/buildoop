#
# Destination paths
#
etl.destination.path=hdfs://buildoopcluster/user/camus/salida
etl.execution.base.path=hdfs://buildoopcluster/user/camus/base
etl.execution.history.path=hdfs://buildoopcluster/user/camus/history

#
# Encoders
#
#camus.message.encoder.class=com.linkedin.camus.etl.kafka.coders.DummyKafkaMessageEncoder

#
# Decoders: JsonStringMessageDecoder, LatestSchemaKafkaAvroMessageDecoder
#
#camus.message.decoder.class=com.linkedin.camus.etl.kafka.coders.LatestSchemaKafkaAvroMessageDecoder
camus.message.decoder.class=com.linkedin.camus.etl.kafka.coders.JsonStringMessageDecoder

#
# Avro Schemas
#
#kafka.message.coder.schema.registry.class=com.linkedin.camus.example.DummySchemaRegistry
kafka.message.coder.schema.registry.class=com.linkedin.camus.example.schemaregistry.DummySchemaRegistry

etl.record.writer.provider.class=com.linkedin.camus.etl.kafka.common.StringRecordWriterProvider
etl.output.record.delimiter=\n
camus.message.timestamp.format=yyyy-MM-dd'T'HH:mm:ss
camus.message.timestamp.field=dt

# Used by the committer to arrange .avro files into a partitioned scheme. 
# This will be the default partitioner for all topic that do not have a 
# partitioner specified
#etl.partitioner.class=com.linkedin.camus.etl.kafka.coders.DefaultPartitioner

# Partitioners can also be set on a per-topic basis
#etl.partitioner.class.<topic-name>=com.your.custom.CustomPartitioner

# all files in this dir will be added to the distributed cache and placed on the classpath for hadoop tasks
# hdfs.default.classpath.dir=

# max hadoop tasks to use, each task can pull multiple topic partitions
mapred.map.tasks=30

# max historical time that will be pulled from each partition based on event timestamp
kafka.max.pull.hrs=1

# events with a timestamp older than this will be discarded. 
kafka.max.historical.days=3

# Max minutes for each mapper to pull messages (-1 means no limit)
kafka.max.pull.minutes.per.task=-1

# if whitelist has values, only whitelisted topic are pulled.  nothing on the blacklist is pulled
kafka.blacklist.topics=
kafka.whitelist.topics=camus
log4j.configuration=true

# Name of the client as seen by kafka
kafka.client.name=camus

# Fetch Request Parameters
kafka.fetch.buffer.size=10485761
kafka.fetch.request.correlationid=
kafka.fetch.request.max.wait=
kafka.fetch.request.min.bytes=

# Connection parameters.
kafka.brokers=hadoop-manager:9092
kafka.timeout.value=100

# Stops the mapper from getting inundated with Decoder exceptions for the same topic
# Default value is set to 10
max.decoder.exceptions.to.print=5

# Controls the submitting of counts to Kafka
# Default value set to true
post.tracking.counts.to.kafka=true
monitoring.event.class=class.that.generates.record.to.submit.counts.to.kafka

# everything below this point can be ignored for the time being, 
# will provide more documentation down the road
################################################################
etl.run.tracking.post=false
kafka.monitor.tier=
etl.counts.path=
kafka.monitor.time.granularity=10
etl.hourly=hourly
etl.daily=daily
etl.ignore.schema.errors=false

# configure output compression for deflate or snappy. Defaults to deflate
etl.output.codec=deflate
etl.deflate.level=6
#etl.output.codec=snappy

etl.default.timezone=America/Los_Angeles
etl.output.file.time.partition.mins=60
etl.keep.count.files=false
etl.execution.history.max.of.quota=.8

mapred.output.compress=true
mapred.map.max.attempts=1

kafka.client.buffer.size=20971520
kafka.client.so.timeout=60000

#zookeeper.session.timeout=
#zookeeper.connection.timeout=


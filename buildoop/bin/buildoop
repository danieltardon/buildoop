#!/usr/bin/env groovy 
/* vim:set ts=4:sw=4:et:sts=4:ai:tw=80
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Grape for add maven repository dependencies to your classpath
 */

// Add maven LOG4J logger dependencies
@Grab('log4j:log4j:1.2.17')

import org.apache.log4j.*
import groovy.util.logging.*
import groovy.grape.Grape

/**
 * Main class for Buildoop system.
 *
 * @author Javi Roman <javiroman@redoop.org>
 *
 */
@Log4j
class Buildoop {
	final static def GENCONFIG  = "buildoop/conf/buildoop.conf"
	def globalConfig
	def ROOT 
    def wo = []

	/**
 	 * Print header with provided text.
 	 *
 	 * @param textForHeader Text to be included in the header.
 	 * @param sizeOfHeader Number of characters in each row of header.
 	 */
	def Buildoop() {
		loadConfigurations()
		def env = System.getenv()
		ROOT = env["BDROOT"]
        assert ROOT != null, 'Enviroment must not be null'
	}

	def loadConfigurations() {
		System.setProperty("log4j.ignoreTCL", "true");
		System.setProperty("java.security.egd", "file:/dev/./urandom");

		// load general configuration properties
		globalConfig = new ConfigSlurper(). \
				parse(new File(GENCONFIG).toURL())

		// load Log4j configuration properties
	   def config = new ConfigSlurper(). \
				parse(new File(globalConfig.buildoop.log4jconf).toURL())

        PropertyConfigurator.configure(config.toProperties()) 
		log.info "\n-- LOG4J Logging (${log.name}: ${log.class}) --"
	}

	def displayBanner() {
        userMessage("INFO", "Buildoop: Hadoop Ecosystem Builder\n\n")
	}

	def createLogfolder() {
		new File(globalConfig.buildoop.logfolder).mkdir()
	}

	def createBuildFolders() {
		new File(globalConfig.buildoop.logfolder).mkdir()
		new File(globalConfig.buildoop.cache).mkdir()
		new File(globalConfig.buildoop.stamps).mkdir()
		new File(globalConfig.buildoop.downloads).mkdir()
		new File(globalConfig.buildoop.work).mkdir()
		new File(globalConfig.buildoop.bomdeploy).mkdir()
	}

    def userMessage(type, msg) {
        def ANSI_RESET = "0m"
        def ANSI_RED = "31;1m"
        def ANSI_GREEN = "32;1m"
        def ANSI_YELLOW = "33;1m"
        def ANSI_PURPLE = "35;1m"
        def ANSI_CYAN = "36;1m"
        def ANSI_BLUE = "34;1m"
        def CSI="\u001B["

        def colors = ["OK":ANSI_GREEN,
                      "ERROR":ANSI_RED,
                      "WARNING":ANSI_YELLOW,
                      "INFO":ANSI_BLUE]

        print CSI + colors[type] + msg + CSI + ANSI_RESET
    }

    static def main(args) {
        def buildoop = new Buildoop()

        buildoop.displayBanner()
		buildoop.createLogfolder()
		buildoop.createBuildFolders()

		String[] roots = [buildoop.globalConfig.buildoop.classfolder]
		def engine = new GroovyScriptEngine(roots)

		// 1. Parsing the command line
        log.info  "Parsing command line"
		def ParseOptionsClass = engine.loadScriptByName('ParseOptions.groovy')
		def parseOptions = ParseOptionsClass.newInstance(buildoop)

		buildoop.wo = parseOptions.parseOpt(args)
        assert buildoop.wo != null, 'must not be null'

		// 2. Host tools and BOM file sanity checking
        log.info  "Sanity checking bits"
		def SanityCheckingClass = engine.loadScriptByName('SanityChecking.groovy')
		def sanityChecking = SanityCheckingClass.newInstance(log)

		// 3. Real works with the working options from user
		log.info "Main controller"
		def MainControllerClass = engine.loadScriptByName('MainController.groovy')
		def mainController = MainControllerClass.newInstance(buildoop)
    }
}

